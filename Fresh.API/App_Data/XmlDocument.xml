<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreshAPI</name>
    </assembly>
    <members>
        <member name="T:Fresh.API.Areas.DE_HTML.Controllers.DE_HTMLController">
            <summary>
            Controller used to handle requests for enhanced HTML for displaying DE details, including
            Sensor details if present.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.DE_HTML.Controllers.DE_HTMLController.GetDEDetails(System.Int32)">
            <summary>
            GET: api/html/de/123
            
            This is the main route
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Fresh.API.Areas.DE_HTML.Controllers.DE_HTMLController.GetEnhancedDetails(System.Int32)">
            <summary>
            GET:  api/html/de/dedetails/123
            
            This is the route called by the main view.  Returns a partial view
            to enable updating only part of the browser content.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Fresh.API.Areas.DE_HTML.Models.DE_Details_ViewModel">
            <summary>
            View model to be used to assist with passing DE details data to views
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.DE_HTML.Models.NameValue_ViewModel">
            <summary>
            Intended to be used as a basic vm for razor pages with tables that display name/value columns
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,Fresh.API.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:Fresh.API.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:Fresh.API.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,Fresh.API.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,Fresh.API.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(Fresh.API.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:Fresh.API.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Fresh.API.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:Fresh.API.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:Fresh.API.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleKey.#ctor(Fresh.API.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Fresh.API.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,Fresh.API.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Fresh.API.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:Fresh.API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fresh.API.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fresh.API.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator">
            <summary>
            Simulate the action selection and record the decision making process.
            
            This class is basically a copy of default IHttpActionSelector implementation (DefaultActionSelector) private members,
            and methods where we have included logging.
            The private members of the DefaultActionSelector are copied here, so we can access them.
            
            Some help internal help classes are also copied to assist the process,
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator.Simulate(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            Simulating the action selecting process. It mimics the ASP.NET Web API internal logic
            </summary>
            <param name="controllerContext">The controller context.</param>
            <returns>A structure contains the log of selecting process</returns>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator.FindActionsForVerb(System.Net.Http.HttpMethod)">
            <summary>
            This is a copy of the private ApiControllerActionSelector.FindActionsForVerb. It doesn't use the cache
            but copies the contents of the FindActionsForVerbWorker method.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator.FindActionUsingRouteAndQueryParameters(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.ReflectedHttpActionDescriptor},System.Boolean)">
            <summary>
            This is an exact copy from ApiControllerActionSelector.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator.IsValidActionMethod(System.Reflection.MethodInfo)">
            <summary>
            This is an exact copy from ApiControllerActionSelector.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator.IsSubset(System.String[],System.Collections.Generic.HashSet{System.String})">
            <summary>
            This is an exact copy from ApiControllerActionSelector.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.ActionSelectSimulator.RunSelectionFilters(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.HttpActionDescriptor})">
            <summary>
            Replace the private method from ApiControllerActionSelector.
            
            The IActionMethodSelector interface used in the method is internal so we must make a copy. 
            CacheAttrsIActionMethodSelector is also internal.
            The default implementation of IActionMethodSelector finds methods marked with the NonActionAttribute, so the
            code below is converted to directly filter out methods with that attribute.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Components.DictionaryExtensions">
            <summary>
            An exact copy of the TryGetValue method from  DictionaryExtensions.cs.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Components.HttpParameterBindingExtensions">
            <summary>
            A copy of HttpParameterBindingExtensions.cs with one change. HttpParameterBindingExtensions.WillReadUri calls the internal
            interface IUriValueProvderFactory, so that code is also in this method.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Components.TypeHelper">
            <summary>
            A static class that provides various <see cref="T:System.Type"/> related helpers.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Components.TypeHelper.OfType``1(System.Object[])">
            <summary>
            Fast implementation to get the subset of a given type.
            </summary>
            <typeparam name="T">type to search for</typeparam>
            <returns>subset of objects that can be assigned to T</returns>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.InspectActionInvoker">
            <summary>
            Hijacks the original invoker. It examines the header before 
            executing the action. If the inspect header exists, returns the inspection data in a 200 response.
            If the inspection header does not exist, the delegate calls the default InvokeActionAsync method.
            
            The inspection data saved in the request property are collected when the request is passed
            along the stack.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.InspectActionSelector">
             <summary>
             This class replaces ApiControllerActionSelector (it's hooked up in RouteDebuggerConfig.cs). 
             It uses  _innerSelector to call into ApiControllerActionSelector methods and it calls ActionSelectSimulator methods.
             Private members of ApiControllerActionSelector cannot be called with a delegate, so a copy of the private members of
             ApiControllerActionSelector are contained in the class ActionSelectSimulator.
            
             See http://www.asp.net/web-api/overview/web-api-routing-and-actions/routing-and-action-selection for more info.   
             
              The SelectAction method examines the request header. If an inspection header is found, it runs the 
              action selection simulator, saves the inspection data in the request property, then uses the delegate
              to run the ApiControllerActionSelector.SelectAction method.
             </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.InspectControllerSelector">
            <summary>
            This class replaces the DefaultHttpControllerSelector (see RouteDebuggerConfig.cs).  
            It uses _innerSelector to call into DefaultHttpControllerSelector methods.
            See http://www.asp.net/web-api/overview/web-api-routing-and-actions/routing-and-action-selection for more info.
            
            The SelectController method examines the request header. If an inspection header is found:
                1. Saves all candidate controllers in inspection data.
                2. Marks the selected controller.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.InspectHandler">
            <summary>
            Inspect handler saves route inspect data and handler error.
            
            If a request has inspect header, the handler will save all routes and route data to inspect data.
            
            If the return response is not 200. That may cause by 500 or 404, handler extract Inspect data from
            request property and set back the the response. The original response status is saved to the inspect 
            data and actual return response is always 200.
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo">
            <summary>
            Representing one action selection
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo.FoundByActionName">
            <summary>
            Is this action selected based on its action name?
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo.FoundByActionNameWithRightVerb">
            <summary>
            Is this action selected based on its action name and its supported http verb?
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo.FoundByVerb">
            <summary>
            Is this action selected based on its supported http verb?
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo.FoundWithRightParam">
            <summary>
            Do this action's parameters match the ones in query string?
            </summary>
        </member>
        <member name="P:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo.FoundWithSelectorsRun">
            <summary>
            Is this action finally selected by selection attribute?
            </summary>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionLog">
            <summary>
            Logs information collected when ActionSelectSimulator.Simulate is called. 
            ActionSelectSimulator.Simulate replaces DefaultActionSelector.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionLog.MarkSelected(System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.HttpActionDescriptor},System.Action{Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo})">
            <summary>
            Looks for related ActionSelectionInfo instances based on given action
            descriptors. Invoke given marking functor on each of them.
            
            This method is used in action simulator when a selection decision is 
            made in every stage, the selected action will be passed in along with
            a marking functor. The marking functor usually set a particular boolean
            property on related ActionSelectionInfo instance to mark that this action
            is selected in particular stage.
            </summary>
            <param name="actions">The actions to be marked.</param>
            <param name="marking">The functor picking the bool property of an action to be set to true.</param>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.Models.ActionSelectionLog.MarkOthersSelected(System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.HttpActionDescriptor},System.Action{Fresh.API.Areas.RouteDebugger.Models.ActionSelectionInfo})">
            <summary>
            Counterpart of function MarkSelected, instead of marking selected action
            this method mark unselected action.
            </summary>
            <param name="actions">the actions NOT to be marked</param>
            <param name="marking">the functor picking the bool property of an action to be set to true.</param>
        </member>
        <member name="T:Fresh.API.Areas.RouteDebugger.Models.HttpParameterDescriptorInfo">
            <summary>
            Represents the parameters.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.RequestHelper.IsInspectRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns true if this request is a inspect request. 
            
            For sake of security only inspect request from local will be accepted.
            </summary>
        </member>
        <member name="M:Fresh.API.Areas.RouteDebugger.RequestHelper.IsFromLocal(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns true if this request is from local
            </summary>
        </member>
        <member name="T:Fresh.API.Controllers.DEController">
            <summary>
            Class:    DEController
            Project:  Fresh.API
            Purpose:  This class is used for CRUD operations for DE messages
            
            Updates:  none
            </summary>
        </member>
        <member name="F:Fresh.API.Controllers.DEController.Log">
            <summary>
            Log4net logging object
            </summary>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.Get">
            <summary>
            Retrieves a light-weight list of what DE messages are in the system
            </summary>
            <returns>Summary list of DE messages or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.Get(System.Int32)">
            <summary>
            Retrieves the specified DE message from the system
            </summary>
            <param name="lookupID">Lookup id of the message to return</param>
            <returns>DE message or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.Post(EMS.EDXL.DE.v1_0.DEv1_0)">
            <summary>
            Adds a new DE message to the system
            </summary>
            <param name="value">DE message</param>
            <returns>DE message or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.Put(System.Int32,EMS.EDXL.DE.v1_0.DEv1_0)">
            <summary>
            Updates a DE message
            </summary>
            <param name="lookupID">Lookup id of the message to update</param>
            <param name="value">Updated message</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.Delete(System.Int32)">
            <summary>
            Deletes the specified DE message
            </summary>
            <param name="lookupID">Lookup Id of the message to delete</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.PutPosition(System.Int32,Fresh.PostGIS.DEPositionDTO)">
            <summary>
            Updates the position on the specified DE using the information 
            passed in the body of the request.
            </summary>
            <param name="lookupID">The ID of the DE to update.</param>
            <param name="value">The information used to update the DE.</param>
        </member>
        <member name="M:Fresh.API.Controllers.DEController.Search(Fresh.PostGIS.DESearchDTO)">
            <summary>
            Retrieves list of DE messages that match the search criteria.
            </summary>
            <param name="searchParams">[Required] The search parameters to use to search for DEs.  
            Must contain a FROM parameter that is before the current time and before the TO parameter.</param>
            <returns>Summary list of DE messages or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.FeedsController.GetAllFeedDetail">
            <summary>
            Retrieves the feed details for all feeds.
            </summary>
            <returns>List of the FeedDTO of the feeds</returns>
        </member>
        <member name="M:Fresh.API.Controllers.FeedsController.GetFeedDetail(System.Int32)">
            <summary>
            Retrieves the feed detail for the specified lookupID.
            </summary>
            <param name="lookupID">LookupID of the feed to return</param>
            <returns>FeedDTO of the feed</returns>
        </member>
        <member name="M:Fresh.API.Controllers.FeedsController.GetViewDetail(System.String)">
            <summary>
            Retrieves the feed detail for the specified view, if the view is a valid FeedContent view.
            </summary>
            <param name="viewName">name of the view to return</param>
            <returns>ViewDTO of the view</returns>
        </member>
        <member name="M:Fresh.API.Controllers.FeedsController.Post(Fresh.PostGIS.FeedDTO)">
            <summary>
            Adds a feed to the system
            </summary>
            <param name="value">Feed</param>
            <returns>Feed or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.FeedsController.Delete(System.Int32)">
            <summary>
            Deletes the specified feed or all feeds if the lookupID is not specified.
            </summary>
            <param name="lookupID">Lookup Id of the view to delete</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.FeedsController.IsApprovedFeedContentView(System.String)">
            <summary>
            Checks to see if the view named is a valid FeedContent database view.
            In the future this may be a DB or config check, it may be cached and gets refreshed every so often.
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:Fresh.API.Controllers.HomeController.Index">
            <summary>
            Returns the default view for the website.  Used as the homepage
            </summary>
            <returns>The default view</returns>
        </member>
        <member name="M:Fresh.API.Controllers.HomeController.Swagger">
            <summary>
            Redirects the user to the Swagger UI page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fresh.API.Controllers.HomeController.GetSwaggerUI">
            <summary>
            Redirects the user to the swagger UI
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fresh.API.Controllers.ListController">
            <summary>
            Class:    ListController
            Project:  Fresh.API
            Purpose:  This class is used for CRUD operations for value lists
             
            Updates:  none
            </summary>
        </member>
        <member name="M:Fresh.API.Controllers.ListController.Get(System.Int32)">
            <summary>
            Returns a values list for the provided lookup id
            </summary>
            <param name="lookupID">ID of the value list to be retrieved</param>
            <returns>Value List or error</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ListController.Post(Fresh.PostGIS.SourceValueListDTO)">
            <summary>
            Adds a list of values to the system
            </summary>
            <param name="values">List of values</param>
            <returns>list of values or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ListController.Delete(System.Int32)">
            <summary>
            Deletes an entire list of values from the system
            </summary>
            <param name="lookupID">ID of the value list to be deleted</param>
            <returns>Success or failure</returns>
        </member>
        <member name="T:Fresh.API.Controllers.RulesController">
            <summary>
            Class:    RulesController
            Project:  Fresh.API
            Purpose:  This class is used for CRUD operations for rules.
            Created:  2016-03-10
            Author:   Brian Wilkins - ArdentMC
            
            Updates:  none
            </summary>
        </member>
        <member name="M:Fresh.API.Controllers.RulesController.Get">
            <summary>
            Retrieves list of rules in the system
            </summary>
            <returns>Summary list of rules or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesController.Get(System.Int32)">
            <summary>
            Retrieves rule by hash
            </summary>
            <param name="lookupID">ID of the rule to be retrieved</param>
            <returns>Summary rule or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesController.Delete">
            <summary>
            Deletes all of the rules from the system
            </summary>
            <returns>Number of rules deleted or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesController.Delete(System.Int32)">
            <summary>
            Deletes the specified rule
            </summary>
            <param name="lookupID">ID of the rule to be deleted</param>
            <returns>Success or failure</returns>
        </member>
        <member name="T:Fresh.API.Controllers.RulesFedController">
            <summary>
            Class:    RulesFedController
            Project:  Fresh.API
            Purpose:  This class is used for CRUD operations for rules with federation Uri.
            Created:  2016-03-10
            Author:   Brian Wilkins - ArdentMC
            
            Updates:  none
            </summary>
        </member>
        <member name="F:Fresh.API.Controllers.RulesFedController.dbDal">
            <summary>
            DAL class to interface to database
            </summary>
        </member>
        <member name="M:Fresh.API.Controllers.RulesFedController.Get">
            <summary>
            Returns all of the rules with federation URI
            </summary>
            <returns>Set of federation rules or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesFedController.Get(System.Int32)">
            <summary>
            Gets a rule with federation URI by hash
            </summary>
            <param name="lookupID">Lookup id of the federation rule</param>
            <returns>Rule with federation URI or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesFedController.Post(Fresh.PostGIS.RuleFedDTO)">
            <summary>
            Adds a rule with federation URI to the system
            </summary>
            <param name="value">Content to set the rule</param>
            <returns>Rule with federation URI or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesFedController.Put(System.Int32,Fresh.PostGIS.RuleFedDTO,System.String)">
            <summary>
            Updates rule.  If a destination is specified, it adds the destination
            string to the list of Federation URIs.
            </summary>
            <param name="lookupID">ID of the rule to be updated</param>
            <param name="value">Content to update the rule</param>
            <param name="destination">Federation URI to be added to rule</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesFedController.Delete(System.Int32,System.String)">
            <summary>
            Deletes a rule's Federation URI list. If a destination string is specified it deletes the 
            specified Federation URI from the rule's Federation URI list
            </summary>
            <param name="lookupID">ID of the rule to be deleted</param>
            <param name="destination">Federation URI to be deleted</param>
            <returns>Success or failure</returns>
        </member>
        <member name="T:Fresh.API.Controllers.RulesSVController">
            <summary>
            Class:    RulesSVController
            Project:  Fresh.API
            Purpose:  This class is used for CRUD operations for rules with feeds.
            Created:  2016-03-10
            Author:   Brian Wilkins - ArdentMC
            
            Updates:  none
            </summary>
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Get">
            <summary>
            Retrieves list of SV rules in the system
            </summary>
            <returns>Summary list of SV rules or failure</returns>  
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Get(System.Int32)">
            <summary>
            Gets a SV rule by hash 
            </summary>
            <param name="lookupID">ID of the rule to retrieve</param>
            <returns>SV rule or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Post(Fresh.PostGIS.RuleSourceValueDTO)">
            <summary>
            Adds a SV rule to the system
            </summary>
            <param name="value">Rule</param>
            <returns>SV Rule or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Put(System.Int32,Fresh.PostGIS.RuleSourceValueDTO)">
            <summary>
            Updates a SV rule
            </summary>
            <param name="lookupID">ID of the rule to be updated</param>
            <param name="value">Updated SV Rule</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Put(System.Int32,System.String,System.String)">
            <summary>
            Updates a SV rule
            </summary>
            <param name="lookupID">ID of the rule to be updated</param>
            <param name="feedid">Id of the feed to be updated</param>
            <param name="feedvalue">Content to update the rule</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Delete(System.Int32)">
            <summary>
            Deletes the specified SV rule
            </summary>
            <param name="lookupID">ID of the rule to be deleted</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.RulesSVController.Delete(System.Int32,System.String,System.String)">
            <summary>
            TODO: Implement Method
            Deletes the specified SV rule
            </summary>
            <param name="lookupID">ID of the rule to be deleted</param>
            <param name="feedid">Id of the feed to be updated</param>
            <param name="feedvalue">Content to update the rule</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ValidationController.Validate(EMS.EDXL.DE.v1_0.DEv1_0)">
            <summary>
            Validates the NIEM message against the schema.  Will return success if the NIEM message that came in was valid.  
            Otherwise it will return failure. 
            </summary>
            <returns>Success or failure</returns>
        </member>
        <member name="T:Fresh.API.Controllers.ValueController">
            <summary>
             Class:    ValueController
             Project:  Fresh.API
             Purpose:  This class is used for CRUD operations for values
             
             Updates:  none
             </summary>
        </member>
        <member name="M:Fresh.API.Controllers.ValueController.Get(System.Int32)">
            <summary>
            Returns a single value from a list
            </summary>
            <param name="lookupID">ID of the value to be retrieved</param>
            <returns>Value or error</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ValueController.Post(Fresh.PostGIS.SourceValueDTO)">
            <summary>
            Adds a new value to a list in the system
            </summary>
            <param name="value">Value to add</param>
            <returns>Value or error</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ValueController.Delete(System.Int32)">
            <summary>
            Deletes a single value from the system
            </summary>
            <param name="lookupID">ID of the value to be deleted</param>
            <returns>Success or failure</returns>
        </member>
        <member name="T:Fresh.API.Controllers.ValuesController">
            <summary>
            Class:    ValuesController
            Project:  Fresh.API
            Purpose:  This class is used for CRUD operations for source values
            
            Updates:  none
            </summary>
        </member>
        <member name="M:Fresh.API.Controllers.ValuesController.Get">
            <summary>
            Returns a list of source values in system
            </summary>
            <returns>Source value list or error</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ValuesController.Delete">
            <summary>
            Deletes all of the source values from the system
            </summary>
            <returns>Success or failure</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ViewContentController.Get(System.String)">
            <summary>
            Retrieves the feed content data for the specified view, if the view is a valid FeedContent view.
            </summary>
            <param name="viewName">name of the view to return</param>
            <returns>FeedContent data from the view</returns>
        </member>
        <member name="M:Fresh.API.Controllers.ViewContentController.IsApprovedFeedContentView(System.String)">
            <summary>
            Checks to see if the view named is a valid FeedContent database view.
            In the future this may be a DB or config check, it may be cached and gets refreshed every so often.
            </summary>
            <param name="viewName"></param>
            <returns>True if the view exists and is valid.  False otherwise</returns>
            <exception cref="T:System.Exception">An error occurred when getting the views</exception>
            <exception cref="T:Npgsql.NpgsqlException">Throw if there was a problem connecting to the database</exception>
        </member>
        <member name="T:Fresh.API.Formatters.HTMLFormatter">
            <summary>
            Custom media type formatter for HTML
            </summary>
        </member>
        <member name="M:Fresh.API.Formatters.HTMLFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fresh.API.Formatters.HTMLFormatter.CanReadType(System.Type)">
            <summary>
            Base method, always returns false
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fresh.API.Formatters.HTMLFormatter.CanWriteType(System.Type)">
            <summary>
            Base method, specifies what can be written
            </summary>
            <param name="type">Type to write</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Fresh.API.Formatters.HTMLFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
            <summary>
            Base method, writes to stream
            </summary>
            <param name="type">type of object to write</param>
            <param name="value">object to write</param>
            <param name="writeStream">stream to write to</param>
            <param name="content">stuff</param>
        </member>
        <member name="M:Fresh.API.Formatters.HTMLFormatter.CreateErrorInfo(System.IO.Stream)">
            <summary>
            Creates the page that is shown when an error occurs
            </summary>
            <param name="writeStream">The write stream</param>
        </member>
        <member name="T:Fresh.API.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Fresh.API.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Fresh.API.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Fresh.API.Swagger.ContentTypeOperationFilter">
            <summary>
            Custom filter.  Allows us to specify xml as our response type
            </summary>
        </member>
        <member name="M:Fresh.API.Swagger.ContentTypeOperationFilter.Apply(Swashbuckle.Swagger.Operation,Swashbuckle.Swagger.SchemaRegistry,System.Web.Http.Description.ApiDescription)">
            <summary>
            Applies the filter
            </summary>
            <param name="operation">The Operation</param>
            <param name="schemaRegistry">The Schmea Registry</param>
            <param name="apiDescription">The API Description</param>
        </member>
        <member name="T:Fresh.API.Swagger.SwaggerContentType">
            <summary>
            Attribute to specify the content type of the request and response objects
            This will override the default content types
            </summary>
        </member>
        <member name="M:Fresh.API.Swagger.SwaggerContentType.#ctor">
            <summary>
            Intializes the SwaggerContentType attribute
            </summary>
        </member>
        <member name="M:Fresh.API.Swagger.SwaggerContentType.#ctor(System.String)">
            <summary>
            Intializes the SwaggerContentType attribute
            </summary>
            <param name="contentType">The content type for both the response and request</param>
        </member>
        <member name="P:Fresh.API.Swagger.SwaggerContentType.RequestContentType">
            <summary>
            Holds the Request Content Type
            </summary>
        </member>
        <member name="P:Fresh.API.Swagger.SwaggerContentType.ResponseContentType">
            <summary>
            Holds the Response Content Type
            </summary>
        </member>
    </members>
</doc>
